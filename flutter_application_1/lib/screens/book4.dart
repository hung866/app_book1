import 'dart:convert';
import 'dart:html' as html; // üëà d√πng cho Flutter Web
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'ai_summary.dart'; // üëà File ri√™ng ƒë·ªÉ g·ªçi Gemini AI

class Book4Screen extends StatefulWidget {
  const Book4Screen({super.key});

  @override
  State<Book4Screen> createState() => _Book4ScreenState();
}

class _Book4ScreenState extends State<Book4Screen> {
  bool _isLoading = false;
  bool _isPlaying = false;
  bool _isPaused = false;
  String _audioUrl = "";

  // ‚úÖ FPT.AI API Key & Voice
  final String apiKey = "fFO05oCcIcZW564ahRDy0zjgdGxJVzM2";
  final String voice = "minhquang";

  final String textToRead = '''
Ng√†y x∆∞a, c√≥ hai v·ª£ ch·ªìng gi√† hi·ªÅn l√†nh s·ªëng trong m·ªôt t√∫p l·ªÅu nh·ªè. H·ªç kh√¥ng c√≥ con c√°i n√™n r·∫•t bu·ªìn. M·ªôt ng√†y n·ªç, B√† l√£o n·∫±m m∆° th·∫•y B·ª•t b·∫£o r·∫±ng: "Tr·ªùi s·∫Ω ban cho hai √¥ng b√† m·ªôt ƒë·ª©a con trai". √çt l√¢u sau, b√† sinh ra m·ªôt c·∫≠u b√© kh·ªèe m·∫°nh, ƒë·∫∑t t√™n l√† Th·∫°ch Sanh.

Khi cha m·∫π m·∫•t, Th·∫°ch Sanh s·ªëng m·ªôt m√¨nh d∆∞·ªõi g·ªëc ƒëa, l·∫•y ngh·ªÅ sƒÉn b·∫Øn l√†m k·∫ø sinh nhai. Nh·ªù t·∫≠p luy·ªán, ch√†ng c√≥ s·ª©c m·∫°nh phi th∆∞·ªùng. M·ªôt h√¥m, L√Ω Th√¥ng ƒëi qua th·∫•y Th·∫°ch Sanh kh·ªèe m·∫°nh li·ªÅn nghƒ© c√°ch l·ª£i d·ª•ng. H·∫Øn r·ªß Th·∫°ch Sanh v·ªÅ ·ªü chung, gi·∫£ l√†m anh em k·∫øt nghƒ©a.

M·ªôt ng√†y n·ªç, ƒë·∫øn l∆∞·ª£t L√Ω Th√¥ng canh mi·∫øu, n∆°i c√≥ con ch·∫±n tinh ƒÉn th·ªãt ng∆∞·ªùi. H·∫Øn l·ª´a Th·∫°ch Sanh ƒëi thay. Nh∆∞ng v·ªõi cung t√™n v√† s·ª©c m·∫°nh, Th·∫°ch Sanh ƒë√£ gi·∫øt ƒë∆∞·ª£c ch·∫±n tinh. L√Ω Th√¥ng c∆∞·ªõp c√¥ng, ƒëem ƒë·∫ßu ch·∫±n tinh d√¢ng vua. Vua ban th∆∞·ªüng, c√≤n Th·∫°ch Sanh b·ªã l·ª´a ph·∫£i tr·ªën v·ªÅ g·ªëc ƒëa.

Sau ƒë√≥, c√¥ng ch√∫a b·ªã ƒë·∫°i b√†ng b·∫Øt. Th·∫°ch Sanh b·∫Øn g√£y c√°nh ƒë·∫°i b√†ng, l·∫ßn theo d·∫•u ƒë·∫øn hang c·ª©u c√¥ng ch√∫a. Nh∆∞ng khi ra ngo√†i, L√Ω Th√¥ng l·∫°i l·∫•p c·ª≠a hang, h√≤ng ch√¥n s·ªëng Th·∫°ch Sanh trong ƒë√≥. Nh·ªù c√¢y ƒë√†n th·∫ßn m√† Th·∫°ch Sanh t√¨m ƒë∆∞·ª£c trong hang, ch√†ng tho√°t ra ngo√†i.

Khi c√¥ng ch√∫a tr·ªü v·ªÅ cung nh∆∞ng c√¢m l·∫∑ng kh√¥ng n√≥i ƒë∆∞·ª£c. M·ªôt l·∫ßn, nghe ti·∫øng ƒë√†n c·ªßa Th·∫°ch Sanh, n√†ng t·ªânh l·∫°i v√† k·ªÉ h·∫øt m·ªçi chuy·ªán. Vua t·ª©c gi·∫≠n, b·∫Øt L√Ω Th√¥ng m·∫π con t·ªôi √°c. Nh∆∞ng Th·∫°ch Sanh khoan dung, tha cho h·ªç v·ªÅ. Tr√™n ƒë∆∞·ªùng v·ªÅ, tr·ªùi gi√°ng s√©t ƒë√°nh ch·∫øt m·∫π con L√Ω Th√¥ng.

Vua g·∫£ c√¥ng ch√∫a cho Th·∫°ch Sanh. L√∫c b·∫•y gi·ªù, c√°c n∆∞·ªõc ch∆∞ h·∫ßu ƒëem qu√¢n sang x√¢m l∆∞·ª£c. Th·∫°ch Sanh m·ªôt m√¨nh ra tr·∫≠n, d√πng ti·∫øng ƒë√†n th·∫ßn khi·∫øn qu√¢n ƒë·ªãch khi·∫øp s·ª£ ph·∫£i ƒë·∫ßu h√†ng. Sau ƒë√≥, Th·∫°ch Sanh s·ªëng h·∫°nh ph√∫c b√™n c√¥ng ch√∫a, nh√¢n d√¢n y√™n vui, ƒë·∫•t n∆∞·ªõc th√°i b√¨nh.
''';

  html.AudioElement? _audioElement;

  // üîä ƒê·ªçc truy·ªán b·∫±ng FPT.AI, x·ª≠ l√Ω l·ªói 429
  Future<void> _startReading() async {
    setState(() {
      _isLoading = true;
      _isPlaying = false;
      _isPaused = false;
    });

    try {
      final url = Uri.parse("https://api.fpt.ai/hmi/tts/v5");
      final headers = {
        "api-key": apiKey,
        "speed": "0",
        "voice": voice,
      };

      http.Response response;
      int retry = 0;

      // ‚úÖ N·∫øu b·ªã l·ªói 429 th√¨ ƒë·ª£i r·ªìi th·ª≠ l·∫°i
      do {
        response = await http.post(url, headers: headers, body: textToRead);
        if (response.statusCode == 429) {
          retry++;
          if (retry > 3) throw Exception("FPT.AI qu√° t·∫£i, vui l√≤ng th·ª≠ l·∫°i sau v√†i ph√∫t.");
          await Future.delayed(const Duration(seconds: 3));
        } else {
          break;
        }
      } while (true);

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        final audioUrl = data["async"];

        if (audioUrl != null && audioUrl.toString().isNotEmpty) {
          setState(() => _audioUrl = audioUrl);

          _audioElement = html.AudioElement(audioUrl)
            ..autoplay = true
            ..controls = false;

          html.document.body!.append(_audioElement!);
          _audioElement!.play();

          _audioElement!.onEnded.listen((_) {
            setState(() {
              _isPlaying = false;
              _isPaused = false;
            });
          });

          setState(() {
            _isPlaying = true;
            _isPaused = false;
          });
        } else {
          throw Exception("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c URL √¢m thanh h·ª£p l·ªá.");
        }
      } else {
        throw Exception("L·ªói API: ${response.statusCode}");
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("L·ªói ƒë·ªçc truy·ªán: $e")),
      );
    } finally {
      setState(() => _isLoading = false);
    }
  }

  // ‚è∏Ô∏è T·∫°m d·ª´ng ƒë·ªçc
  void _pauseReading() {
    if (_audioElement != null && _isPlaying) {
      _audioElement!.pause();
      setState(() {
        _isPlaying = false;
        _isPaused = true;
      });
    }
  }

  // ‚ñ∂Ô∏è Ti·∫øp t·ª•c ƒë·ªçc
  void _resumeReading() {
    if (_audioElement != null && _isPaused) {
      _audioElement!.play();
      setState(() {
        _isPlaying = true;
        _isPaused = false;
      });
    }
  }

  // üß† T√≥m t·∫Øt b·∫±ng AI Gemini
  final _summarizer = GeminiSummarizer();
  String _summary = "";
  bool _isSummarizing = false;

  Future<void> _getSummary() async {
    setState(() => _isSummarizing = true);
    try {
      final result = await _summarizer.summarizeText(textToRead);
      setState(() => _summary = result);
    } catch (e) {
      ScaffoldMessenger.of(context)
          .showSnackBar(SnackBar(content: Text("L·ªói khi t√≥m t·∫Øt: $e")));
    } finally {
      setState(() => _isSummarizing = false);
    }
  }

  @override
  void dispose() {
    _audioElement?.remove();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text("Th·∫°ch Sanh"),
        backgroundColor: Colors.green,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            Center(
              child: Image.asset(
                'lib/assets/anh4.jpg',
                height: 200,
              ),
            ),
            const SizedBox(height: 16),
            Expanded(
              child: SingleChildScrollView(
                child: Text(
                  textToRead,
                  style: const TextStyle(fontSize: 18, height: 1.6),
                  textAlign: TextAlign.justify,
                ),
              ),
            ),
            const SizedBox(height: 20),

            // üéõÔ∏è N√∫t ƒëi·ªÅu khi·ªÉn ƒë·ªçc truy·ªán
            if (_isLoading)
              const CircularProgressIndicator()
            else
              Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  ElevatedButton.icon(
                    onPressed: _startReading,
                    icon: const Icon(Icons.play_arrow),
                    label: const Text("ƒê·ªçc truy·ªán"),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.green,
                      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 10),
                    ),
                  ),
                  const SizedBox(width: 12),
                  ElevatedButton.icon(
                    onPressed: _isPlaying ? _pauseReading : null,
                    icon: const Icon(Icons.pause),
                    label: const Text("T·∫°m d·ª´ng"),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.orange,
                      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 10),
                    ),
                  ),
                  const SizedBox(width: 12),
                  ElevatedButton.icon(
                    onPressed: _isPaused ? _resumeReading : null,
                    icon: const Icon(Icons.play_circle),
                    label: const Text("Ti·∫øp t·ª•c"),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.deepPurple,
                      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 10),
                    ),
                  ),
                ],
              ),

            const SizedBox(height: 20),

            // üß† N√∫t t√≥m t·∫Øt
            ElevatedButton.icon(
              onPressed: _isSummarizing ? null : _getSummary,
              icon: const Icon(Icons.smart_toy),
              label: Text(_isSummarizing ? "ƒêang t√≥m t·∫Øt..." : "üß† T√≥m t·∫Øt b·∫±ng AI"),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.teal,
                padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 10),
              ),
            ),

            // üìù Hi·ªÉn th·ªã t√≥m t·∫Øt
            if (_summary.isNotEmpty) ...[
              const SizedBox(height: 16),
              Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.teal.shade50,
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Text(
                  _summary,
                  style: const TextStyle(fontSize: 16, fontStyle: FontStyle.italic),
                  textAlign: TextAlign.justify,
                ),
              ),
            ],
          ],
        ),
      ),
    );
  }
}
