import 'dart:convert';
import 'dart:html' as html; // üëà D√†nh cho Flutter Web
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'ai_summary.dart'; // üëà File ri√™ng ƒë·ªÉ g·ªçi Gemini AI

class Book1Screen extends StatefulWidget {
  const Book1Screen({super.key});

  @override
  State<Book1Screen> createState() => _Book1ScreenState();
}

class _Book1ScreenState extends State<Book1Screen> {
  bool _isLoading = false;
  bool _isPlaying = false;
  bool _isPaused = false;
  String _audioUrl = "";

  final String textToRead = '''
T√¥i t√™n l√† D·∫ø M√®n. Thu·ªü nh·ªè, t√¥i s·ªëng v√¥ t∆∞ l·ª± trong m·ªôt hang ƒë·∫•t nh·ªè.
T√¥i th∆∞·ªùng tr√™u ch·ªçc c√°c lo√†i v·∫≠t y·∫øu h∆°n m√¨nh nh∆∞ ch·ªã C√†o C√†o, anh B·ªç Ng·ª±a.
T√¥i nghƒ© r·∫±ng m√¨nh l√† ch√∫a t·ªÉ c·ªßa v√πng ƒë·∫•t ·∫•y.
Nh∆∞ng ch√≠nh v√¨ ki√™u cƒÉng, t√¥i ƒë√£ m·∫Øc m·ªôt sai l·∫ßm l·ªõn.

M·ªôt h√¥m, t√¥i tr√™u ch·ªçc ch·ªã C√≥c khi·∫øn ch·ªã n·ªïi gi·∫≠n.
Ch·ªã C√≥c ƒëi tr·∫£ th√π D·∫ø Cho·∫Øt ‚Äì ng∆∞·ªùi b·∫°n hi·ªÅn l√†nh c·ªßa t√¥i.
T·ª´ ƒë√≥, t√¥i v√¥ c√πng h·ªëi h·∫≠n. T√¥i nh·∫≠n ra r·∫±ng, s·ªëng ki√™u ng·∫°o,
h·ªëng h√°ch ch·ªâ khi·∫øn ng∆∞·ªùi kh√°c ƒëau kh·ªï v√† b·∫£n th√¢n c≈©ng ch·∫≥ng vui v·∫ª g√¨.

Sau chuy·ªán ƒë√≥, t√¥i quy·∫øt ƒë·ªãnh ra ƒëi, b·∫Øt ƒë·∫ßu cu·ªôc phi√™u l∆∞u ƒë·ªÉ chu·ªôc l·ªói
v√† h·ªçc c√°ch s·ªëng t·ªët ƒë·∫πp h∆°n. ƒê√≥ l√† kh·ªüi ƒë·∫ßu cho h√†nh tr√¨nh phi√™u l∆∞u c·ªßa ƒë·ªùi t√¥i ‚Äì D·∫ø M√®n.
''';

  html.AudioElement? _audioElement;

  // üéß G·ªçi API Laravel ‚Üí Laravel g·ªçi FPT.AI
  Future<void> _startReading() async {
    setState(() {
      _isLoading = true;
      _isPlaying = false;
      _isPaused = false;
    });

    try {
      // üîπ G·ªçi API Laravel trung gian (thay v√¨ g·ªçi FPT.AI tr·ª±c ti·∫øp)
      final url = Uri.parse("http://127.0.0.1:8000/api/tts");

      final response = await http.post(
        url,
        headers: {"Content-Type": "application/json"},
        body: jsonEncode({
          "text": textToRead,
          "voice": "minhquang", // Laravel c√≥ th·ªÉ d√πng tham s·ªë n√†y
          "speed": "0",
        }),
      );

      final data = jsonDecode(response.body);

      if (response.statusCode == 200 && data["success"] == true) {
        final audioUrl = data["audio_url"];

        if (audioUrl != null && audioUrl.toString().isNotEmpty) {
          setState(() => _audioUrl = audioUrl);

          // üîä Ph√°t √¢m thanh
          _audioElement?.pause();
          _audioElement?.remove();

          _audioElement = html.AudioElement(audioUrl)
            ..autoplay = true
            ..controls = false;

          html.document.body!.append(_audioElement!);
          _audioElement!.play();

          // Khi ƒë·ªçc xong
          _audioElement!.onEnded.listen((_) {
            setState(() {
              _isPlaying = false;
              _isPaused = false;
            });
          });

          setState(() {
            _isPlaying = true;
            _isPaused = false;
          });
        } else {
          throw Exception("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c URL √¢m thanh h·ª£p l·ªá t·ª´ server.");
        }
      } else {
        throw Exception(data["message"] ?? "L·ªói server Laravel");
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("‚ùå L·ªói ƒë·ªçc truy·ªán: $e")),
      );
    } finally {
      setState(() => _isLoading = false);
    }
  }

  // ‚è∏Ô∏è T·∫°m d·ª´ng ƒë·ªçc
  void _pauseReading() {
    if (_audioElement != null && _isPlaying) {
      _audioElement!.pause();
      setState(() {
        _isPlaying = false;
        _isPaused = true;
      });
    }
  }

  // ‚ñ∂Ô∏è Ti·∫øp t·ª•c ƒë·ªçc
  void _resumeReading() {
    if (_audioElement != null && _isPaused) {
      _audioElement!.play();
      setState(() {
        _isPlaying = true;
        _isPaused = false;
      });
    }
  }

  // üß† T√≥m t·∫Øt n·ªôi dung b·∫±ng Gemini AI
  final _summarizer = GeminiSummarizer();
  String _summary = "";
  bool _isSummarizing = false;

  Future<void> _getSummary() async {
    setState(() => _isSummarizing = true);
    try {
      final result = await _summarizer.summarizeText(textToRead);
      setState(() => _summary = result);
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("L·ªói khi t√≥m t·∫Øt: $e")),
      );
    } finally {
      setState(() => _isSummarizing = false);
    }
  }

  @override
  void dispose() {
    _audioElement?.remove();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text("D·∫ø M√®n phi√™u l∆∞u k√Ω - Ch∆∞∆°ng 1"),
        backgroundColor: Colors.green,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            Center(
              child: Image.asset(
                'lib/assets/anh1.jpg',
                height: 200,
              ),
            ),
            const SizedBox(height: 16),
            Expanded(
              child: SingleChildScrollView(
                child: Text(
                  textToRead,
                  style: const TextStyle(fontSize: 18, height: 1.6),
                  textAlign: TextAlign.justify,
                ),
              ),
            ),
            const SizedBox(height: 20),

            // üéõÔ∏è C√°c n√∫t ƒëi·ªÅu khi·ªÉn ƒë·ªçc truy·ªán
            if (_isLoading)
              const CircularProgressIndicator()
            else
              Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  ElevatedButton.icon(
                    onPressed: _startReading,
                    icon: const Icon(Icons.play_arrow),
                    label: const Text("ƒê·ªçc truy·ªán"),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.green,
                      padding: const EdgeInsets.symmetric(
                          horizontal: 16, vertical: 10),
                    ),
                  ),
                  const SizedBox(width: 12),
                  ElevatedButton.icon(
                    onPressed: _isPlaying ? _pauseReading : null,
                    icon: const Icon(Icons.pause),
                    label: const Text("T·∫°m d·ª´ng"),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.orange,
                      padding: const EdgeInsets.symmetric(
                          horizontal: 16, vertical: 10),
                    ),
                  ),
                  const SizedBox(width: 12),
                  ElevatedButton.icon(
                    onPressed: _isPaused ? _resumeReading : null,
                    icon: const Icon(Icons.play_circle),
                    label: const Text("Ti·∫øp t·ª•c"),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.deepPurple,
                      padding: const EdgeInsets.symmetric(
                          horizontal: 16, vertical: 10),
                    ),
                  ),
                ],
              ),

            const SizedBox(height: 20),

            // üß† N√∫t t√≥m t·∫Øt AI
            ElevatedButton.icon(
              onPressed: _isSummarizing ? null : _getSummary,
              icon: const Icon(Icons.smart_toy),
              label: Text(
                  _isSummarizing ? "ƒêang t√≥m t·∫Øt..." : "üß† T√≥m t·∫Øt b·∫±ng AI"),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.teal,
                padding:
                    const EdgeInsets.symmetric(horizontal: 16, vertical: 10),
              ),
            ),

            // üìù Hi·ªÉn th·ªã ph·∫ßn t√≥m t·∫Øt
            if (_summary.isNotEmpty) ...[
              const SizedBox(height: 16),
              Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.teal.shade50,
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Text(
                  _summary,
                  style: const TextStyle(
                      fontSize: 16, fontStyle: FontStyle.italic),
                  textAlign: TextAlign.justify,
                ),
              ),
            ],
          ],
        ),
      ),
    );
  }
}
