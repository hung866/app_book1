import 'dart:convert';
import 'dart:html' as html; // üëà D√†nh cho Flutter Web
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'ai_summary.dart'; // üëà File ri√™ng ƒë·ªÉ g·ªçi Gemini AI

class Book2Screen extends StatefulWidget {
  const Book2Screen({super.key});

  @override
  State<Book2Screen> createState() => _Book2ScreenState();
}

class _Book2ScreenState extends State<Book2Screen> {
  bool _isLoading = false;
  bool _isPlaying = false;
  bool _isPaused = false;
  String _audioUrl = "";

  final String textToRead = '''
Ng√†y x∆∞a c√≥ hai anh em nh√† kia, cha m·∫π m·∫•t s·ªõm ƒë·ªÉ l·∫°i cho h·ªç m·ªôt gia t√†i. 
Ng∆∞·ªùi anh tham lam chi·∫øm h·∫øt nh√† c·ª≠a, ru·ªông v∆∞·ªùn, ch·ªâ ƒë·ªÉ l·∫°i cho em trai 
m·ªôt t√∫p l·ªÅu nh·ªè v√† m·ªôt c√¢y kh·∫ø.

Ng∆∞·ªùi em hi·ªÅn l√†nh chƒÉm s√≥c c√¢y kh·∫ø ng√†y ƒë√™m. M·ªôt nƒÉm kia, c√¢y ra r·∫•t nhi·ªÅu qu·∫£. 
B·ªóng m·ªôt h√¥m, c√≥ con chim l·∫° bay t·ªõi ƒÉn kh·∫ø. Ng∆∞·ªùi em than: 
"Chim ∆°i, kh·∫ø l√† c·ªßa t√¥i, chim ƒÉn th√¨ t√¥i l·∫•y g√¨ m√† s·ªëng?"

Chim n√≥i: "ƒÇn m·ªôt qu·∫£, tr·∫£ c·ª•c v√†ng. May t√∫i ba gang, mang ƒëi m√† ƒë·ª±ng."

Ng∆∞·ªùi em l√†m theo l·ªùi chim. H√¥m sau chim ƒë·∫øn ch·ªü ng∆∞·ªùi em ƒëi qua bi·ªÉn, 
ƒë·∫øn ƒë·∫£o c√≥ r·∫•t nhi·ªÅu v√†ng b·∫°c ch√¢u b√°u. Ng∆∞·ªùi em ch·ªâ l·∫•y ƒë·∫ßy t√∫i ba gang 
r·ªìi quay v·ªÅ. T·ª´ ƒë√≥, cu·ªôc s·ªëng c·ªßa v·ª£ ch·ªìng ng∆∞·ªùi em tr·ªü n√™n ·∫•m no, h·∫°nh ph√∫c.

Ng∆∞·ªùi anh bi·∫øt chuy·ªán, li·ªÅn xin ƒë·ªïi t√†i s·∫£n ƒë·ªÉ l·∫•y c√¢y kh·∫ø. 
Khi chim ƒë·∫øn, ng∆∞·ªùi anh c≈©ng b·∫Øt ch∆∞·ªõc em n√≥i c√¢u: 
"ƒÇn m·ªôt qu·∫£, tr·∫£ c·ª•c v√†ng. May t√∫i m∆∞·ªùi hai gang, mang ƒëi m√† ƒë·ª±ng."

Chim v·∫´n ƒë∆∞a ng∆∞·ªùi anh ƒëi, nh∆∞ng v√¨ t√∫i qu√° to, 
v√†ng n·∫∑ng khi·∫øn ng∆∞·ªùi anh r∆°i xu·ªëng bi·ªÉn v√† kh√¥ng bao gi·ªù tr·ªü v·ªÅ n·ªØa.
''';

  html.AudioElement? _audioElement;

  // üéß G·ªçi API TTS qua Laravel server (tr√°nh l·ªói 429 & ·∫©n key)
  Future<void> _startReading() async {
    setState(() {
      _isLoading = true;
      _isPlaying = false;
      _isPaused = false;
    });

    try {
      final url = Uri.parse("http://127.0.0.1:8000/api/tts"); // üîπ Laravel endpoint

      final response = await http.post(
        url,
        headers: {"Content-Type": "application/json"},
        body: jsonEncode({
          "text": textToRead,
          "voice": "minhquang",
          "speed": "0",
        }),
      );

      final data = jsonDecode(response.body);

      if (response.statusCode == 200 && data["success"] == true) {
        final audioUrl = data["audio_url"];
        if (audioUrl != null && audioUrl.toString().isNotEmpty) {
          setState(() => _audioUrl = audioUrl);

          _audioElement?.pause();
          _audioElement?.remove();

          _audioElement = html.AudioElement(audioUrl)
            ..autoplay = true
            ..controls = false;

          html.document.body!.append(_audioElement!);
          _audioElement!.play();

          _audioElement!.onEnded.listen((_) {
            setState(() {
              _isPlaying = false;
              _isPaused = false;
            });
          });

          setState(() {
            _isPlaying = true;
            _isPaused = false;
          });
        } else {
          throw Exception("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c URL √¢m thanh h·ª£p l·ªá.");
        }
      } else {
        throw Exception(data["message"] ?? "L·ªói server Laravel");
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("‚ùå L·ªói ƒë·ªçc truy·ªán: $e")),
      );
    } finally {
      setState(() => _isLoading = false);
    }
  }

  // ‚è∏Ô∏è T·∫°m d·ª´ng ƒë·ªçc
  void _pauseReading() {
    if (_audioElement != null && _isPlaying) {
      _audioElement!.pause();
      setState(() {
        _isPlaying = false;
        _isPaused = true;
      });
    }
  }

  // ‚ñ∂Ô∏è Ti·∫øp t·ª•c ƒë·ªçc
  void _resumeReading() {
    if (_audioElement != null && _isPaused) {
      _audioElement!.play();
      setState(() {
        _isPlaying = true;
        _isPaused = false;
      });
    }
  }

  // üß† T√≥m t·∫Øt n·ªôi dung b·∫±ng Gemini AI
  final _summarizer = GeminiSummarizer();
  String _summary = "";
  bool _isSummarizing = false;

  Future<void> _getSummary() async {
    setState(() => _isSummarizing = true);
    try {
      final result = await _summarizer.summarizeText(textToRead);
      setState(() => _summary = result);
    } catch (e) {
      ScaffoldMessenger.of(context)
          .showSnackBar(SnackBar(content: Text("L·ªói khi t√≥m t·∫Øt: $e")));
    } finally {
      setState(() => _isSummarizing = false);
    }
  }

  @override
  void dispose() {
    _audioElement?.remove();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text("S·ª± t√≠ch c√¢y kh·∫ø"),
        backgroundColor: Colors.green,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            Center(
              child: Image.asset(
                'lib/assets/anh2.jpg',
                height: 200,
              ),
            ),
            const SizedBox(height: 16),
            Expanded(
              child: SingleChildScrollView(
                child: Text(
                  textToRead,
                  style: const TextStyle(fontSize: 18, height: 1.6),
                  textAlign: TextAlign.justify,
                ),
              ),
            ),
            const SizedBox(height: 20),

            // üéõÔ∏è N√∫t ƒëi·ªÅu khi·ªÉn ƒë·ªçc truy·ªán
            if (_isLoading)
              const CircularProgressIndicator()
            else
              Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  ElevatedButton.icon(
                    onPressed: _startReading,
                    icon: const Icon(Icons.play_arrow),
                    label: const Text("ƒê·ªçc truy·ªán"),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.green,
                      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 10),
                    ),
                  ),
                  const SizedBox(width: 12),
                  ElevatedButton.icon(
                    onPressed: _isPlaying ? _pauseReading : null,
                    icon: const Icon(Icons.pause),
                    label: const Text("T·∫°m d·ª´ng"),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.orange,
                      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 10),
                    ),
                  ),
                  const SizedBox(width: 12),
                  ElevatedButton.icon(
                    onPressed: _isPaused ? _resumeReading : null,
                    icon: const Icon(Icons.play_circle),
                    label: const Text("Ti·∫øp t·ª•c"),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.deepPurple,
                      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 10),
                    ),
                  ),
                ],
              ),

            const SizedBox(height: 20),

            // üß† N√∫t t√≥m t·∫Øt
            ElevatedButton.icon(
              onPressed: _isSummarizing ? null : _getSummary,
              icon: const Icon(Icons.smart_toy),
              label: Text(_isSummarizing ? "ƒêang t√≥m t·∫Øt..." : "üß† T√≥m t·∫Øt b·∫±ng AI"),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.teal,
                padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 10),
              ),
            ),

            // üìù Hi·ªÉn th·ªã t√≥m t·∫Øt
            if (_summary.isNotEmpty) ...[
              const SizedBox(height: 16),
              Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.teal.shade50,
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Text(
                  _summary,
                  style: const TextStyle(fontSize: 16, fontStyle: FontStyle.italic),
                  textAlign: TextAlign.justify,
                ),
              ),
            ],
          ],
        ),
      ),
    );
  }
}
