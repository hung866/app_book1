import 'dart:convert';
import 'dart:html' as html; // üëà D√†nh cho Flutter Web
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'ai_summary.dart'; // üëà G·ªçi Google Gemini AI

class Book3Screen extends StatefulWidget {
  const Book3Screen({super.key});

  @override
  State<Book3Screen> createState() => _Book3ScreenState();
}

class _Book3ScreenState extends State<Book3Screen> {
  bool _isLoading = false;
  bool _isPlaying = false;
  bool _isPaused = false;
  String _audioUrl = "";

  // ‚úÖ FPT.AI API Key m·ªõi & Voice
  final String apiKey = "fFO05oCcIcZW564ahRDy0zjgdGxJVzM2";
  final String voice = "minhquang";

  final String textToRead = '''
Ng√†y x·ª≠a ng√†y x∆∞a, c√≥ hai ch·ªã em c√πng cha kh√°c m·∫π l√† T·∫•m v√† C√°m. 
M·∫π T·∫•m m·∫•t s·ªõm, cha T·∫•m l·∫•y v·ª£ kh√°c, sinh ra C√°m. 
Sau khi cha T·∫•m m·∫•t, d√¨ gh·∫ª v√† C√°m ƒë·ªëi x·ª≠ v·ªõi T·∫•m r·∫•t t·ªá, b·∫Øt T·∫•m l√†m h·∫øt vi·ªác n·∫∑ng nh·ªçc trong nh√†.

M·ªôt h√¥m, d√¨ gh·∫ª b·∫£o hai ch·ªã em ra ƒë·ªìng x√∫c t√©p, ai ƒë∆∞·ª£c nhi·ªÅu h∆°n s·∫Ω th∆∞·ªüng cho m·ªôt chi·∫øc y·∫øm ƒë·ªè. 
T·∫•m chƒÉm ch·ªâ n√™n x√∫c ƒë∆∞·ª£c nhi·ªÅu, c√≤n C√°m th√¨ l∆∞·ªùi bi·∫øng, m·∫£i ch∆°i. 
C√°m l·ª´a T·∫•m xu·ªëng ao t·∫Øm r·ªìi tr√∫t h·∫øt t√©p c·ªßa T·∫•m mang v·ªÅ nh√†. 
T·∫•m ch·ªâ c√≤n l·∫°i m·ªôt con c√° b·ªëng nh·ªè, c√¥ nu√¥i n√≥ m·ªói ng√†y. 
Nh∆∞ng khi d√¨ gh·∫ª bi·∫øt chuy·ªán, b√† ta b·∫Øt C√°m gi·∫øt b·ªëng ƒÉn th·ªãt. 
T·∫•m ƒëau kh·ªï kh√≥c, ƒë∆∞·ª£c B·ª•t hi·ªán l√™n b·∫£o mang x∆∞∆°ng b·ªëng ch√¥n xu·ªëng b·ªën g√≥c gi∆∞·ªùng ƒë·ªÉ ƒë∆∞·ª£c gi√∫p ƒë·ª°.

Nh·ªù ph√©p m√†u, T·∫•m ƒë∆∞·ª£c chim s·∫ª gi√∫p ƒë·ª° ch·ªçn th√≥c, c√≥ qu·∫ßn √°o ƒë·∫πp ƒëi h·ªôi, v√† g·∫∑p nh√† vua. 
Nh√† vua th∆∞∆°ng y√™u T·∫•m v√† l·∫•y c√¥ l√†m ho√†ng h·∫≠u. 
D√¨ gh·∫ª v√† C√°m ghen t·ª©c, l·∫≠p m∆∞u h·∫°i ch·∫øt T·∫•m nhi·ªÅu l·∫ßn, nh∆∞ng T·∫•m nh·ªù B·ª•t h√≥a th√¢n th√†nh chim v√†ng anh, c√¢y xoan ƒë√†o, qu·∫£ th·ªã... 
Cu·ªëi c√πng, T·∫•m s·ªëng l·∫°i, tr·ª´ng ph·∫°t C√°m v√† d√¨ gh·∫ª, v√† s·ªëng h·∫°nh ph√∫c m√£i m√£i b√™n nh√† vua.
''';

  html.AudioElement? _audioElement;

  // üéß ƒê·ªçc truy·ªán b·∫±ng FPT.AI TTS
  Future<void> _startReading() async {
    setState(() {
      _isLoading = true;
      _isPlaying = false;
      _isPaused = false;
    });

    try {
      final url = Uri.parse("https://api.fpt.ai/hmi/tts/v5");
      final headers = {
        "api-key": apiKey,
        "speed": "0",
        "voice": voice,
      };

      // ‚úÖ G·ªçi API, retry n·∫øu b·ªã 429
      http.Response response;
      int retry = 0;
      do {
        response = await http.post(url, headers: headers, body: textToRead);
        if (response.statusCode == 429) {
          retry++;
          if (retry > 3) throw Exception("G·ªçi API qu√° nhi·ªÅu l·∫ßn, h√£y th·ª≠ l·∫°i sau √≠t ph√∫t.");
          await Future.delayed(const Duration(seconds: 3)); // ‚è≥ ch·ªù r·ªìi th·ª≠ l·∫°i
        } else {
          break;
        }
      } while (true);

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        final audioUrl = data["async"];

        if (audioUrl != null && audioUrl.toString().isNotEmpty) {
          setState(() => _audioUrl = audioUrl);

          _audioElement = html.AudioElement(audioUrl)
            ..autoplay = true
            ..controls = false;

          html.document.body!.append(_audioElement!);
          _audioElement!.play();

          _audioElement!.onEnded.listen((_) {
            setState(() {
              _isPlaying = false;
              _isPaused = false;
            });
          });

          setState(() {
            _isPlaying = true;
            _isPaused = false;
          });
        } else {
          throw Exception("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c URL √¢m thanh h·ª£p l·ªá.");
        }
      } else {
        throw Exception("L·ªói API: ${response.statusCode}");
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("L·ªói ƒë·ªçc truy·ªán: $e")),
      );
    } finally {
      setState(() => _isLoading = false);
    }
  }

  // ‚è∏Ô∏è T·∫°m d·ª´ng ƒë·ªçc
  void _pauseReading() {
    if (_audioElement != null && _isPlaying) {
      _audioElement!.pause();
      setState(() {
        _isPlaying = false;
        _isPaused = true;
      });
    }
  }

  // ‚ñ∂Ô∏è Ti·∫øp t·ª•c ƒë·ªçc
  void _resumeReading() {
    if (_audioElement != null && _isPaused) {
      _audioElement!.play();
      setState(() {
        _isPlaying = true;
        _isPaused = false;
      });
    }
  }

  // üß† T√≥m t·∫Øt b·∫±ng AI Gemini
  final _summarizer = GeminiSummarizer();
  String _summary = "";
  bool _isSummarizing = false;

  Future<void> _getSummary() async {
    setState(() => _isSummarizing = true);
    try {
      final result = await _summarizer.summarizeText(textToRead);
      setState(() => _summary = result);
    } catch (e) {
      ScaffoldMessenger.of(context)
          .showSnackBar(SnackBar(content: Text("L·ªói khi t√≥m t·∫Øt: $e")));
    } finally {
      setState(() => _isSummarizing = false);
    }
  }

  @override
  void dispose() {
    _audioElement?.remove();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text("T·∫•m C√°m"),
        backgroundColor: Colors.green,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            Center(
              child: Image.asset(
                'lib/assets/anh3.jpg',
                height: 200,
              ),
            ),
            const SizedBox(height: 16),
            Expanded(
              child: SingleChildScrollView(
                child: Text(
                  textToRead,
                  style: const TextStyle(fontSize: 18, height: 1.6),
                  textAlign: TextAlign.justify,
                ),
              ),
            ),
            const SizedBox(height: 20),

            // üéõÔ∏è N√∫t ƒëi·ªÅu khi·ªÉn ƒë·ªçc truy·ªán
            if (_isLoading)
              const CircularProgressIndicator()
            else
              Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  ElevatedButton.icon(
                    onPressed: _startReading,
                    icon: const Icon(Icons.play_arrow),
                    label: const Text("ƒê·ªçc truy·ªán"),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.green,
                      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 10),
                    ),
                  ),
                  const SizedBox(width: 12),
                  ElevatedButton.icon(
                    onPressed: _isPlaying ? _pauseReading : null,
                    icon: const Icon(Icons.pause),
                    label: const Text("T·∫°m d·ª´ng"),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.orange,
                      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 10),
                    ),
                  ),
                  const SizedBox(width: 12),
                  ElevatedButton.icon(
                    onPressed: _isPaused ? _resumeReading : null,
                    icon: const Icon(Icons.play_circle),
                    label: const Text("Ti·∫øp t·ª•c"),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.deepPurple,
                      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 10),
                    ),
                  ),
                ],
              ),

            const SizedBox(height: 20),

            // üß† N√∫t t√≥m t·∫Øt b·∫±ng AI
            ElevatedButton.icon(
              onPressed: _isSummarizing ? null : _getSummary,
              icon: const Icon(Icons.smart_toy),
              label: Text(_isSummarizing ? "ƒêang t√≥m t·∫Øt..." : "üß† T√≥m t·∫Øt b·∫±ng AI"),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.teal,
                padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 10),
              ),
            ),

            // üìù Hi·ªÉn th·ªã t√≥m t·∫Øt
            if (_summary.isNotEmpty) ...[
              const SizedBox(height: 16),
              Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.teal.shade50,
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Text(
                  _summary,
                  style: const TextStyle(fontSize: 16, fontStyle: FontStyle.italic),
                  textAlign: TextAlign.justify,
                ),
              ),
            ],
          ],
        ),
      ),
    );
  }
}
